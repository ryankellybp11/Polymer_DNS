#!/bin/sh
           AppName=preplot
            CurDir=`pwd`
BasePathThisScript=`dirname "$0"`
       ProductHome="$CurDir/$BasePathThisScript/.."

if test ! -d "$ProductHome" ; then
  ProductHome="$BasePathThisScript/.."
fi

if test ! -d "$ProductHome" ; then
  echo "Err: Cannot find $ProductHome" >&2
  exit
fi

TecHome=
if test "$AppName" = "chorus" ; then
    for arg
    do
      case $arg in
          *--tec360=*)TecHome=`echo $arg | sed 's/^.*=//'`;;
                    *);;
      esac
    done

    if test "$TecHome" = "" ; then
      AbsProductHomeDir=`readlink -f $ProductHome`
      ParentDir=`dirname $AbsProductHomeDir`
      ChorusDir=`basename $AbsProductHomeDir`
      Tec360Dir=`echo $ChorusDir | sed 's/chorus/360ex/'`
      if test -d $ParentDir/$Tec360Dir ; then
          if test -f $ParentDir/$Tec360Dir/bin/tec360-bin ; then
            TecHome=$ParentDir/$Tec360Dir
          fi
      fi
      if test "$TecHome" = "" ; then
          echo "Err: Cannot find the directory that contains a 360 EX installation in $ParentDir/$Tec360Dir"
          exit
      fi
    fi
else
  TecHome=$ProductHome
fi

##
# Determine if the libstdc++.so.6 library installed on the system provides the
# ABI needed. If not, the supplied C++ runtime will be included in the setup
# of LD_LIBRARY_PATH below.
#
grep "GLIBCXX_3.4.21" "`ldd "$0-bin" 2>/dev/null | grep libstdc++.so.6 | sed -e 's/^.*=>\s*//' -e 's/\s*(.*$//'`" > /dev/null 2>&1
if test $? = 0; then
  HAVE_NEEDED_GLIBCXX_ABI=y
else
  HAVE_NEEDED_GLIBCXX_ABI=n
fi

##
# Prefix the library path with the supplied path.
#
# @param Path
#   Path to prefix to library path. Path may contain spaces.
#
PrefixToLibPath()
{
  DYLD_LIBRARY_PATH=$*:$DYLD_LIBRARY_PATH
    LD_LIBRARY_PATH=$*:$LD_LIBRARY_PATH
         SHLIB_PATH=$*:$SHLIB_PATH
            LIBPATH=$*:$LIBPATH
}

#
# Check for batch flag without disturbing pristine args
#
CheckForBatchFlag()
{
  while test $# -gt 0
  do
    case $1 in
      "-b") IsBatch=y ;;
         *) ;;
    esac
    shift
  done
}

#
# Returns the application specific mesa flag.
#
GetMesaFlag()
{
  if test "$AppName" = "chorus" ; then
    MesaFlag="--mesa"
  else
    MesaFlag="-mesa"
  fi
  echo $MesaFlag
}

#
# Check for mesa flag without disturbing pristine args
#
CheckForMesaFlag()
{
  MesaFlag=`GetMesaFlag`
  while test $# -gt 0
  do
    case $1 in
      $MesaFlag) IsMesa=y ;;
              *) ;;
    esac
    shift
  done
}

# Some products are assembled with fixup_bundle(), which puts all dependent
# libraries in bin/. Others follow a more traditional Nix approach and have
# libraries in lib/.
ProductBinDir="$ProductHome/bin"
ProductLibDir="$ProductHome/lib"
PrefixToLibPath "$ProductBinDir"
PrefixToLibPath "$ProductBinDir/sys-util" # add utility libraries such as GLU and PNG
if test "$HAVE_NEEDED_GLIBCXX_ABI" != "y"; then
  PrefixToLibPath "$ProductBinDir/sys" # add C++ runtime
fi
PrefixToLibPath "$ProductLibDir"

CheckForMesaFlag $*
CheckForBatchFlag $*
if test "$IsMesa" = "y" -o "$IsBatch" = "y" ; then
  MesaLibPath=$TecHome/bin/mesa
  if test ! -d "$MesaLibPath" ; then
    echo "Err: Cannot find $MesaLibPath" >&2
    exit
  fi
  PrefixToLibPath $MesaLibPath
fi

#
# If the user's LANG environment variable is not set make sure to set it up for them. For all Linux
# machines we setup for English UTF-8 and for big iron Unix machines "C".
#
if test "$LANG" = "" ; then
  if test "`uname`" = "Linux" ; then
      LANG=en_US.UTF-8
  else
      LANG=C
  fi  
  export LANG
fi
               
#
# Setup the LC_NUMERIC to "C" so that numeric values use decimal points instead of comma's. This is
# important for macro language processing where we rely on consistent representation of numbers.
#
LC_NUMERIC=C
export LC_NUMERIC


# Set Qt plugin path so that QtLibrary does not search the system for plugins
# and find plugin libraries that depend on Qt libraries that Tecplot doesn't
# distribute or are incompatible with the version supplied.
QT_PLUGIN_PATH="$ProductBinDir/plugins:$TecHome/bin/plugins"

export DYLD_LIBRARY_PATH \
       LD_LIBRARY_PATH   \
       SHLIB_PATH        \
       LIBPATH           \
       QT_PLUGIN_PATH

# SDK only! But shouldn't harm other products.
TECSDKHOME="$ProductHome"
export TECSDKHOME

# Determine if an implicit Mesa flag is needed due to PBuffers and Pixmax requireing a valid
# X-Window
if test "$IsBatch" = "y" -a "$IsMesa" != "y" ; then
  implicitMesaFlag=`GetMesaFlag`
else
  implicitMesaFlag="" # ...-mesa or --mesa already supplied or not batch mode
fi

#
# Special case for tech support.  If first actual flag is -ldd then just run ldd
# on 360 with the current environment
#

if test $# -eq 1 -a "$1" = "-ldd" ; then
  ldd "$0-bin" 
else
  "$0-bin" $implicitMesaFlag "$@"
fi
